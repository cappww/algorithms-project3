
package edu.gwu.algtest;

import edu.gwu.algtest.*;
import edu.gwu.debug.Debug;
import edu.gwu.stat.*;
import edu.gwu.util.*;
import edu.gwu.geometry.*;

import java.util.*;

class LineIntersectionTester implements GenericTester {

  private static final boolean debug = true;

  public static final String XLABEL = "Data size";
  public static final String YLABEL = "Time";
  public static final String TITLE = "Intersection 

  public static final int numAccAttempts = 10;

  boolean testLarge = false;
  boolean smallSegments = true;

  LineSegmentIntersectionAlgorithm alg;
  PropertyExtractor props;
  RandomGenerator rand;

  LineSegment[] segments;
  double smallSegMin=0.1, smallSegMax=0.2;

  public LineIntersectionTester (PropertyExtractor props)
  {
    try {
      this.props = props;

      String testLargeStr = props.getStringProperty ("lineIntersectionTester.testLarge");
      if (testLargeStr == null)
        testLarge = false;
      else if (testLargeStr.equalsIgnoreCase ("false"))
        testLarge = false;
      else
        testLarge = true;
      
      String smallSegStr = props.getStringProperty ("lineIntersectionTester.smallSegments");
      if (smallSegStr == null)
        smallSegments = false;
      else if (smallSegStr.equalsIgnoreCase ("false"))
        smallSegments = false;
      else
        smallSegments = true;

      smallSegStr = props.getStringProperty ("lineIntersectionTester.smallSegmentMin");
      smallSegMin = Double.parseDouble (smallSegStr.trim());
      smallSegStr = props.getStringProperty ("lineIntersectionTester.smallSegmentMax");
      smallSegMax = Double.parseDouble (smallSegStr.trim());

      if (smallSegMax > 0.4) {
        System.out.println ("ERROR in LineInterSectionTester: small Segment size cannot be larger than 0.4 in unit square");
        System.exit(1);
      }
      
      rand = RandomGeneratorFactory.getGenerator ();
    }
    catch (UtilException e) {
      System.out.println ("LineIntersection: Properties exception e=" + e);
      e.printStackTrace();
      System.exit(1);
    }
    catch (NumberFormatException e){
      System.out.println ("LineIntersection: Properties exception e=" + e);
      e.printStackTrace();
      System.exit(1);
    }

  }



  void error (String errStr)
    throws AlgorithmTestException 
  {
    throw new AlgorithmTestException (errStr);
  }

  public void setAlgorithm (Algorithm alg)
    throws AlgorithmTestException 
  {
    if (! (alg instanceof LineSegmentIntersectionAlgorithm) ) {
      error ("LineIntersectionTester: Algorithm " + alg.getName() + " does not implement LineSegmentIntersectionAlgorithm");
    }
    this.alg = (LineSegmentIntersectionAlgorithm) alg;
  }
  

  String arrayToString (String msg, Object[] A)
  {
    String str = msg + ": ";
    for (int i=0; i<A.length; i++)
      str +=  "[" + A[i] + "]";
    str += "\n";
    return str;
  }


  void printSegments (String msg, LineSegment[] segments)
  {
    System.out.println ("LineIntersectionTester: " + segments.length + " SEGMENTS: " + msg);
    for (int i=0; i<segments.length; i++) {
      System.out.println (" => " + segments[i]);
    }
  }
  

  Pointd p1, p2, p3, p4, p5, p6, p7, p8;
  LineSegment L1, L2, L3, L4;
  
  void makeTestData ()
  {
    p1 = new Pointd (0.1, 0.1);
    p2 = new Pointd (0.9, 0.9);
    p3 = new Pointd (0.1, 0.9);
    p4 = new Pointd (0.9, 0.1);
    p5 = new Pointd (0.1, 0.6);
    p6 = new Pointd (0.2, 0.6);
    p7 = new Pointd (0.3, 0.6);
    p8 = new Pointd (0.9, 0.6);
    L1 = new LineSegment (p1, p2);
    L2 = new LineSegment (p3, p4);
    L3 = new LineSegment (p5, p6);
    L4 = new LineSegment (p7, p8);
  }


  public TestResult testCorrectness ()
    throws AlgorithmTestException 
  {
    try {
      // Test1: no intersection: L1, L3
      makeTestData ();
      LineSegment[] segments = new LineSegment [2];
      segments[0] = L1;
      segments[1] = L3;
      Pointd[] intersections = alg.findIntersections (segments);
      if (intersections != null)
        failed ("Test1: no intersection");
      passed ("Test1: no intersection");

      // Test2: one intersection: L1, L2
      makeTestData ();
      segments = new LineSegment [2];
      segments[0] = L1;
      segments[1] = L2;
      intersections = alg.findIntersections (segments);
      if (intersections.length != 1)
        failed ("Test2: one intersection");
      passed ("Test2: one intersection");

      // Test3: one intersection: L1, L2, L3
      makeTestData ();
      segments = new LineSegment [3];
      segments[0] = L1;
      segments[1] = L2;
      segments[2] = L3;
      intersections = alg.findIntersections (segments);
      if (intersections.length != 1)
        failed ("Test3: one intersection");
      passed ("Test3: one intersection");

      // Test4: 3 intersections
      makeTestData ();
      segments = new LineSegment [3];
      segments[0] = L1;
      segments[1] = L2;
      segments[2] = L4;
      intersections = alg.findIntersections (segments);
      if (intersections.length != 3)
        failed ("Test4: three intersections");
      passed ("Test4: three intersections");

      // Random#.
      segments = generateSegments (10, false);
      intersections = alg.findIntersections (segments);
      if (intersections.length != 6)
        failed ("Test5: 10 segments, 6 intersections");
      passed ("Test5: 10 segments, 6 intersections");

      segments = generateSegments (100, false);
      intersections = alg.findIntersections (segments);
      if (intersections.length != 503)
        failed ("Test6: 100 segments, 503 intersections");
      passed ("Test6: 100 segments, 503 intersections");
    }
    catch (Exception e) {
      System.out.println ("Exception caught in testing correctness:" + e);
      e.printStackTrace();
      System.out.println ("Continuing...");
    }
    //**
    return null;
  }
  
  void failed (String msg, Object[] A)
    throws AlgorithmTestException 
  {
    Debug.println ("LineIntersection: FAILED: " + msg);
    Debug.println (arrayToString(": array", A));
    System.out.println ("LineIntersection: FAILED: " + msg);
    throw new AlgorithmTestException (msg);
  }

  void failed (String msg)
    throws AlgorithmTestException 
  {
    Debug.println ("LineIntersection: FAILED: " + msg);
    System.out.println ("LineIntersection: FAILED: " + msg);
    throw new AlgorithmTestException (msg);
  }


  void passed (String msg)
  {
    Debug.println (" => passed: " + msg);
    System.out.println (" => passed: " + msg);
  }

  public void resetSeed ()
  {
    rand.resetSeed ();
  }
  

  public void generatePerformanceData (int problemSize)
    throws AlgorithmTestException 
  {
    if (smallSegments) {
      segments = generateSmallSegments (problemSize);
    }
    else {
      segments = generateSegments (problemSize, true);
    }
  }

  double[] generateUniqueXValues (int k)
  {
    // Generate.
    double[] X = new double [k];
    double delta = 1.0 / (double) (k + 2);
    X[0] = delta;
    for (int i=1; i<k; i++) {
      X[i] = X[i-1] + delta;
    }
    return X;
  }
  
  void randomPermute (double[] X)
  {
    for (int i=0; i<X.length-1; i++) {
      int k = (int) rand.uniform (i+1, X.length-1);
      double temp = X[i];
      X[i] = X[k];
      X[k] = temp;
    }
  }

  void altReverse (double[] X, int length)
  {
    for (int i=0; i<length/2; i++) {
      if (i % 2 == 0) {
        // Swap i and n-i-1
        double temp = X[i];
        int k = X.length - i - 1;
        X[i] = X[k];
        X[k] = temp;
      }
    }
  }
  

  LineSegment[] generateSegments (int n, boolean randomize)
  {
    LineSegment[] segments = new LineSegment [n];
    // First, unique X values.
    double[] X = generateUniqueXValues (2*n);
    double[] Y = generateUniqueXValues (2*n);
    if (randomize) {
      randomPermute (X);
      randomPermute (Y);
    }
    else {
      altReverse (X, X.length/2);
      altReverse (Y, Y.length);
    }
    
    for (int i=0; i<n; i++) {
      int k1 = 2*i;
      int k2 = 2*i + 1;
      // Use k1 and k2 as indices into arrays.
      Pointd p1 = new Pointd (X[k1], Y[k1]);
      Pointd p2 = new Pointd (X[k2], Y[k2]);
      segments[i] = new LineSegment (p1, p2);
    }
    return segments;
  }

  LineSegment[] generateSmallSegments (int n)
  {
    LineSegment[] segments = new LineSegment [n];
    for (int i=0; i<n; i++) {
      double x1 = rand.uniform ();
      double y1 = rand.uniform ();
      // Now use distance.
      double r = rand.uniform (smallSegMin, smallSegMax);
      // Try to generate next point.
      double x2=0, y2=0;
      int k=0;
      for (k=0; k<numAccAttempts; k++) {
        double theta = rand.uniform (0, Math.PI);
        double delX = r*Math.sin (theta);
        double delY = r*Math.cos (theta);
        x2 = x1 + delX;
        y2 = y1 + delY;
        if ( (x2 > 0) && (x2 < 1) && (y2 > 0) && (y2 < 1) )
          break;
      }
      if (k >= numAccAttempts) {
        // Alternate approach:
        x1 = rand.uniform (r, 1-r);
        y1 = rand.uniform (r, 1-r);
        double theta = rand.uniform (0, Math.PI);
        double delX = r*Math.sin (theta);
        double delY = r*Math.cos (theta);
        x2 = x1 + delX;
        y2 = y1 + delY;
        if ( (!inUnitSq(x1)) || (!inUnitSq(x2)) || (!inUnitSq(y1)) || (!inUnitSq(y2)) ) {
          System.out.println ("ERROR in LineIntersectionTester: out of square: x1=" + x1 + " x2=" + x2 + " y1=" + y1 + " y2=" + y2);
        }
        
      }
      
      Pointd p1 = new Pointd (x1, y1);
      Pointd p2 = new Pointd (x2, y2);
      segments[i] = new LineSegment (p1, p2);
    }
    return segments;
  }
  
  boolean inUnitSq (double x)
  {
    if ( (x >= 0) && (x <= 1) )
      return true;
    else 
      return false;
  }
  

  public void generatePerformanceData (int problemSize1, int problemSize2)
    throws AlgorithmTestException 
  {
    System.out.println ("ERROR: 2-parameter data generation not supported in line-intersection problem");
    System.exit (0);
  }

  public TestResult runPerformanceTest ()
    throws AlgorithmTestException 
  {
    alg.findIntersections (segments);
    return null;
  }

  public String getXaxisLabel ()
  {
    return XLABEL;
  }
  
  public String getYaxisLabel ()
  {
    return YLABEL;
  }

  public String getTitle ()
  {
    return TITLE;
  }
  

  public boolean ifMetric ()
  {
    // We are not using a metric here.
    return false;
  }

  public boolean ifSpecialTest ()
  {
    return false;
  }
  

  public TestResult runSpecialTest ()
    throws AlgorithmTestException
  {
    return null;
  }
  

  
}
